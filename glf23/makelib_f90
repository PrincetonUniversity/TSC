SHELL   = /bin/sh

#computer_os:=   $(shell uname -s)
#computer_arch:= $(shell uname -m)
#computer_name:= $(shell uname -n)

ifeq ($(computer_arch),i686)
endif

ifeq ($(computer_arch),ia64)
endif

ifneq (, $(finstring, jaguar, $(computer_name)))
endif   # --- jaguar end --- #

# --- pppl start --- #
ifeq ($(shell uname -n | cut -c-4),flux)
	COMPILE = $(FC)
	ifeq "$(findstring lfc,$(FC))" "lfc"
		CFOPTS =  --dbl --sav --o2  -I${TRANSP_MOD}
	endif
	ifeq "$(findstring pathscale,$(FC))" "pathscale"
		CFOPTS =  -r8 -static-data  -I${TRANSP_MOD}
	endif
	ifeq "$(findstring intel,$(FC))" "intel"
		#CFOPTS = -r8 -save -ftz -check bounds -I${TRANSP_MOD}
		CFOPTS = -r8 -save -ftz -I${PLASMA_STATE_HOME}
	endif
endif # --- pppl end --- #

FLAGS= $(CFOPTS) #-g
LINK    = ar -ruv
LISTS   = ../list

#Modules with NO external dependency
OBJ0 = 
#Modules which depend ONLY on kind_spec
OBJ1 = 
#Modules which depend ONLY on 
OBJ2 = 
#Modules with more complicated dependence
OBJ3 = 
OBJA = $(OBJ0) $(OBJ1) $(OBJ2) $(OBJ3)
COBJ = 

#Defines vsource.Sub (list of source files.o)
include $(LISTS)/source.lst
include $(LISTS)/module.lst

all : libglf.a  mvlibglf

libglf.a : $(vsource.Sub) 
	$(LINK) $@ $(vsource.Sub) 

#Compile Fortran source modules
$(OBJ0) : ${$(@):.o=.f}
	$(COMPILE) $(FLAGS) -c $(@:.o=.f)
$(OBJ1) : ${$(@):.o=.f} 
	$(COMPILE) $(FLAGS) -c $(@:.o=.f)
$(OBJ2) : ${$(@):.o=.f} 
	$(COMPILE) $(FLAGS) -c $(@:.o=.f)
$(OBJ3) : ${$(@):.o=.f} 
	$(COMPILE) $(FLAGS) -c $(@:.o=.f)

#Compile module .o files
#$(vmodule.Sub) : ${$(@):.o=.f} $(OBJA)
#	$(COMPILE) $(FLAGS) -c $(@:.o=.f) 

#Compile C source .o files
#$(COBJ) : ${$(@):.o=.c}
#        cc $(FLAGS_C) -I../source -c $(@:.o=.c)

#Compile Fortran source .o files
$(vsource.Sub) : ${$(@):.o=.f} 
#	$(COMPILE) $(FLAGS) -c $(@:.o=.f)

%.o: %.f
	$(COMPILE) $(FLAGS) -c -o $@ $<

%.o: %.F
	$(COMPILE) $(FLAGS) -c -o $@ $<

%.o: %.f90
	$(COMPILE) $(FLAGS) -c -o $@ $<

%.o: %.F90
	$(COMPILE) $(FLAGS) -c -o $@ $< 

mvlibglf:
	mv libglf.a $(SRCDIR)
